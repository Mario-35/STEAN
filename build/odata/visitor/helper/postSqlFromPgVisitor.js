"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,a,s){void 0===s&&(s=a);var r=Object.getOwnPropertyDescriptor(t,a);r&&("get"in r?t.__esModule:!r.writable&&!r.configurable)||(r={enumerable:!0,get:function(){return t[a]}}),Object.defineProperty(e,s,r)}:function(e,t,a,s){e[s=void 0===s?a:s]=t[a]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&__createBinding(t,e,a);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.postSqlFromPgVisitor=void 0;const constants_1=require("../../../constants"),helpers_1=require("../../../helpers"),logger_1=require("../../../logger"),enums_1=require("../../../enums"),queries_1=require("../../../db/queries"),models_1=require("../../../models"),log_1=require("../../../log"),helpers_2=require("../../../models/helpers"),dataAccess_1=require("../../../db/dataAccess"),entities=__importStar(require("../../../db/entities"));function postSqlFromPgVisitor(e,d){const i=(e,t,a)=>{var s=models_1.models.getEntityName(a.ctx.config,e);if(s&&s in entities)try{var r=new dataAccess_1.apiAccess(a.ctx,e).formatDataInput(t);if(r)return r}catch(e){}return t};let t="";const c={};var a=d.entity;const u=d.ctx.model["CreateFile"==a?"Datastreams":a],b=d.parentEntity?d.ctx.model[d.parentEntity]:void 0,p={[u.table]:u.table};let m=0;const y=(e,t)=>Object.keys(e.relations).includes(t.name)?t.name:Object.keys(e.relations).includes(t.singular)?t.singular:void 0;var s,a=e=>{const a=[e],s={},r=[];return Object.keys(c).forEach(t=>{Object.keys(c).forEach(e=>{JSON.stringify(c[e].datas).includes("select "+t)&&(s[e]?s[e].push(t):s[e]=[t])})}),Object.keys(s).forEach(t=>{Object.keys(s).forEach(e=>{s[t].includes(e)&&!r.includes(e)&&r.push(e)})}),Object.keys(c).forEach(e=>{Object.keys(s).includes(e)?r.includes(e)||r.push(e):r.unshift(e)}),r.forEach(e=>{var t;c[e].datas.hasOwnProperty("@iot.id")?(t=c[e].datas["@iot.id"],a.push(`, ${e} AS (select verifyId('${c[e].table}', ${t}) as id)`)):c[e].datas.hasOwnProperty("@iot.name")?(t=c[e].datas["@iot.name"],a.push(`, ${e} AS (select "id" from "${c[e].table}" where "name" = '${t}')`)):(a.push(`, ${e} AS (`),d.id?c[e].type==enums_1.EnumOperation.Association?a.push(`INSERT INTO "${c[e].table}" ${(0,helpers_2.createInsertValues)(d.ctx.config,i(c[e].table,c[e].datas,d))} on conflict ("${Object.keys(c[e].datas).join('","')}") do update set ${(0,helpers_2.createUpdateValues)(c[e].datas)} WHERE "${c[e].table}"."${c[e].keyId}" = `+BigInt(d.id).toString()):a.push(`UPDATE "${c[e].table}" SET ${(0,helpers_2.createUpdateValues)(c[e].datas)} WHERE "${c[e].table}"."${c[e].keyId}" = (select verifyId('${c[e].table}', ${d.id}) as id)`):a.push(`INSERT INTO "${c[e].table}" `+(0,helpers_2.createInsertValues)(d.ctx.config,i(c[e].table,c[e].datas,d))),a.push(`RETURNING ${u.table==c[e].table?"*":c[e].keyId})`))}),a.join("\n").replace(/\'@/g,"").replace(/\@'/g,"")};const _=(t,l,a)=>{const s={};l=l||u,a=a||b||u;for(const e in t)l&&!Object.keys(l.relations).includes(e)&&(s[e]="object"==typeof t[e]?JSON.stringify(t[e]):t[e],delete t[e]);const n=e=>{let t=0;var a;return p[e]&&(a=p[e].match(/[0-9]/g),t=null!==a?Number(a.join("")):0),""+e+(t+1).toString()},o=(e,t,a,s,r,i)=>{var l="string"==typeof s;c.hasOwnProperty(t)?i&&l?(c[t].datas[i]=s,c[t].keyId=r):l||(c[t].type!=enums_1.EnumOperation.Table&&c[t].type!=enums_1.EnumOperation.Relation||(c[t].datas=Object.assign(c[t].datas,s)),c[t].keyId=r,c[t].type==enums_1.EnumOperation.Association&&(c[n(t)]={type:c[t].type,table:c[t].table,datas:s,keyId:c[t].keyId})):i&&l?c[t]={type:e,table:a,datas:{[i]:s},keyId:r}:l||(c[t]={type:e,table:a,datas:s,keyId:r})},r=(e,t)=>{var a,s,r,i,e=models_1.models.getEntityName(d.ctx.config,e);e&&(e=d.ctx.model[e],a=n(e.table),p[e.table]=a,(t=_(t,e,l))&&(o(enums_1.EnumOperation.Table,a,e.table,t,"id",void 0),m--),l)&&(a=e,t=l,e=y(a,t),i=y(t,a))&&e&&(e=a.relations[e],i=t.relations[i],e.tableName==i.tableName&&e.tableName==a.table?(s=p[a.table],r=p[t.table],o(enums_1.EnumOperation.Relation,s,a.table,`@(select ${r}.id from ${r})@`,i.tableKey,i.relationKey)):e.tableName==i.tableName?e.tableName==t.table?(s=p[a.table],r=p[t.table],o(enums_1.EnumOperation.Relation,r,t.table,`@(select ${s}.id from ${s})@`,i.tableKey,e.relationKey)):e.tableName!=t.table&&e.tableName!=a.table&&(r=p[a.table],s=p[t.table],o(enums_1.EnumOperation.Association,e.tableName,e.tableName,{[a.table+"_id"]:`@(select ${r}.id from ${r})@`,[t.table+"_id"]:`@(select ${s}.id from ${s})@`},e.tableKey,void 0)):(i=p[a.table],r=p[t.table],o(enums_1.EnumOperation.Table,r,t.table,{[e.relationKey]:`@(select ${i}.id from ${i})@`},e.tableKey,void 0)))};if(l&&a)for(const i in t)Array.isArray(t[i])?Object.entries(t[i]).forEach(([,e])=>{l&&a&&Object.keys(l.relations).includes(i)?r(i,e):s[i]=t[i]}):"object"==typeof t[i]?Object.keys(l.relations).includes(i)&&r(i,t[i]):s[i]=t[i];return s};d.parentEntity&&(r=(l=models_1.models.getEntityName(d.ctx.config,d.parentEntity))?d.ctx.model[l]:void 0,s="string"==typeof d.parentId?(0,helpers_1.getBigIntFromString)(d.parentId):d.parentId,l)&&r&&s&&0<s&&(l=y(u,r))&&(e[l]={"@iot.id":s.toString()});var r=_(e),l=(t=p[u.table]&&c[u.table]&&c[u.table].datas||void 0===r?(c[u.table].datas=Object.assign(r,c[u.table].datas),c[u.table].keyId=d.id?"id":"*",a(`WITH "log_request" AS (SELECT srid FROM ${(0,helpers_1.addDoubleQuotes)(constants_1.VOIDTABLE)} LIMIT 1)`)):a(d.id?r&&0<Object.entries(r).length?`WITH ${u.table} AS (UPDATE ${(0,helpers_1.addDoubleQuotes)(u.table)} set ${(0,helpers_2.createUpdateValues)(r)} WHERE "id" = (select verifyId('${u.table}', ${d.id}) as id) RETURNING *)`:`WITH ${u.table} AS (SELECT * FROM ${(0,helpers_1.addDoubleQuotes)(u.table)} WHERE "id" = ${d.id.toString()})`:`WITH ${u.table} AS (INSERT INTO ${(0,helpers_1.addDoubleQuotes)(u.table)} ${(0,helpers_2.createInsertValues)(d.ctx.config,i(u.name,r,d))} RETURNING *)`),d.toPgQuery());return l&&(t+=(0,queries_1.asJson)({query:`SELECT ${l&&l.select?l.select:"*"} FROM ${p[u.table]} `+(l&&l.groupBy?"GROUP BY "+l.groupBy:""),singular:!1,strip:d.ctx.config.stripNull,count:!1})),log_1.log.query(""+t),t}exports.postSqlFromPgVisitor=postSqlFromPgVisitor;